<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.3.4" created="2016-09-04 14:27" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>maxifalcone</title>
	<link>http://localhost/maxifalcone</link>
	<description>La web personal de Maxi Falcone</description>
	<pubDate>Sun, 04 Sep 2016 14:27:41 +0000</pubDate>
	<language>es-ES</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://localhost/maxifalcone</wp:base_site_url>
	<wp:base_blog_url>http://localhost/maxifalcone</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>maxifalcone@gmail.com</wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>comics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[comics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>musica</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Música]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>sin-categoria</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Sin categoría]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>webdev</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Web.Dev.]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>wordpress</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[wordpress]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename>audio</wp:category_nicename><wp:category_parent>musica</wp:category_parent><wp:cat_name><![CDATA[audio]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>canvas</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[canvas]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>desarrollo-web-para-moviles</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[desarrollo web para móviles]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>html5</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[html5]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>libros</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[libros]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>media-query</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[media Query]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>node-js</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[node.js]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>responsive-web-design</wp:category_nicename><wp:category_parent>webdev</wp:category_parent><wp:cat_name><![CDATA[Responsive Web Design]]></wp:cat_name></wp:category>
	<wp:term><wp:term_id>15</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>home-menu</wp:term_slug><wp:term_name><![CDATA[home Menu]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=4.3.4</generator>

	<item>
		<title>Como hacer un theme de wordpress desde el inicio</title>
		<link>http://localhost/maxifalcone/?p=5</link>
		<pubDate>Tue, 26 Apr 2011 13:14:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org//?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[Finalmente creé <a href="http://www.maxifalcone.org">mi blog personal</a>, y creo que para inaugurarlo, el primer post va dedicado a la creación de este theme de wordpress.
<img src="http://maxifalcone.org/wp-content/themes/maxiFalcone/screenshot.png" alt="captura de este theme de wp" />

Es un recurso bastante habitual que bajemos alguno de los millones de themes disponibles en la blogoesfera y le cambiemos el logo, los colores y algún widget, pero por una cuestión de tratar de ser un poco mas profesional me pareció necesario ver la posibilidad de crear uno theme a partir del mockup psd/png que sea diseñado sin tener en cuenta algún modelo de theme que ande dando vueltas.

Tenía el diseño en png desde hacia un par de años (de verdad, hacía dos años que tenía pensado hacer esto). Hice algunas actualizaciones en el collage de la cabecera -objetos por los que me puedo sentir mas o menos representados-  y luego de eso me puse a trabajar para convertir eso en algo real.

<!--more-->

Es necesario tener una estructura básica que nos muestre las funciones de php que muestran los posts, títulos del blog, descripción y todo lo que está guardado en la DB. algo asi como:

<code class="language-html">&lt;div class="entry"&gt;
&lt;div class="bt-expandir"&gt;&lt;a href="#"&gt;expandir&lt;/a&gt;&lt;/div&gt;
&lt;?php the_content(); ?&gt;
&lt;/div&gt;
</code>

Además es necesario que tenga la mínima cantidad de divs para que esto funcione. Y sumar a eso la ausencia total de estilos para asi poder trabajar nosotros.

Existen unos cuantos templates/themes vacios y fuí a dar con <a href="http://speckyboy.com/2010/03/22/10-blanknaked-wordpress-themes-perfect-for-development/">este post</a> que muestra una lista de 10 themes "desnudos" listos para developear.

Opté por <a href="http://digwp.com/2010/02/blank-wordpress-theme/">el Blank theme</a> cuyo theme cumple con las características descriptas y además en un style.css vienen declarados los elementos con propiedades vacías.

<img src="http://digwp.com/wp-content/blog-images/blank-theme-example.jpg" alt="captura de blank theme" width="380" />

Por una cuestión de portabilidad, instalé un <a href="http://es.wordpress.org/">wordpress</a> en un <a href="http://www.apachefriends.org/en/xampp-windows.html#641" target="_blank">xampp portable</a> donde pude trabajar localmente los archivos del theme. Allí pude modificar los archivos tal como pretendía.

Como adoro <a href="http://www.jquery.com/">jQuery</a> lo agregué algunas funcionalidades que me gustaría ver:

<h3>El botón de "más"</h3>

Es muy util el comment que permite insertar el wp para delimitar el inicio del post que pueda ser mostrado en la index ( &lt;!--more--&gt;) sin tener que mostrar todo el post completo. Este comment es reemplazado por un
<code class="language-html"> &lt;a href="url-del-post" class="more-link"&gt;(más…)&lt;/a&gt;</code>

Se me ocurrió que podía ser genial poder usar todo el potencial de jquery/ajax para evitar recarga de páginas en el navegador, y hacer un llamado solo al contenido y mostrarlo a este donde antes estaba solo el preview.

Intenté buscar si existía algún plug-in de wp que hiciera esto, pero el tiempo que esto me demandaba ya me daba a pensar que podría ser posible programarlo. y asi creé la función:

<code class="language-javascript">
function initClick(){
// busco la url donde apunta el elemento "A" y hago un split en el # porque solo me interesa la primera parte.
var linkTo = $(this).attr('href').split('#'); 
var str = linkTo[0]; 
// cargo con el metodo load al div que se encuentra por encima del elemento 'a'
$(this).parent().prev().parent().load(str+' .entry',function(){ //función que se ejecuta después de cargado el texto.
})</code>

Tan simple como eso. Y quedó muy útil.

<h3>El botón de "expandir"</h3>

Qué tan útil es el sidebar del wp? y a la hora de leer? porque no darle la posibilidad al usuario de sacarlo para expandir el post que está leyendo?

Al rollOver del mouse sobre el post aparece el botón, y al salir lo oculta:

<code class="language=javascript">
$('.entry').hover(function(){
		$(this).find('.bt-expandir').show();
	},function(){
		$(this).find('.bt-expandir').hide();
	})
</code>

el $('bt-expandir') al click ejecuta una sencilla función de expandir/ocultar cambiando el ancho del post y ocultando o mostrando el sidebar:
<code class="language=javascript">
function hideSidebar(){ 
if($(this).text() == 'expandir'){
$('.hidder').hide();
$(this).parent().parent().parent().width(700);
$(this).parent().parent().parent().parent().width(780);
$(this).blur();
$(this).text('contraer');
$(this).parent().parent().find('.more-link').click();
		}else{
		$('.hidder').show();
		$('.entry-wrapper').width(440);
		$('.post').width(523);
		$(this).blur();
		$('.bt-expandir a').text('expandir');
		}
	return false;
}
</code>

Me encanta.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2011-04-26 10:14:17</wp:post_date>
		<wp:post_date_gmt>2011-04-26 13:14:17</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>como-hacer-un-theme-de-wordpress-desde-el-inicio</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hola-mundo]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Libros: Dentro de wikileaks</title>
		<link>http://localhost/maxifalcone/?p=54</link>
		<pubDate>Tue, 03 May 2011 18:27:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://maxifalcone.org/wp-content/uploads/dentro_de_wikileaks_cover.jpg" alt="tapa del libro" class="left-image" />Terminé de leer la semana pasada el libro de Daniel Domscheit-Berg: Dentro de Wikileaks. Lo mas consistente para definir la impresión que me dejó: sumamente divertido. Lo que se diría un libro pochoclero.

A lo largo de la historia el otrora conocido como Daniel Schmitt repaza unas cuantas anécdotas de su paso por wikileaks. Daniel ingresó al proyecto como mero colaborador, pero su pasión por wikileak fue ganandole la vida al punto de abandonar su empleo de técnico en redes en una gran empresa para dedicarse full time al sitio de Julian Assange.

Schimitt fue portavoz del sitio, y un gran sector de la prensa llegó a llamarlo "el fundador de wikileaks" valiendole esto el odio del mismisimo Assange, a quien veía como un competidor interno dispuesto a disputarle el poder y protagonismo.

Es asi como el autor nos muestra un Julian Assange totalmente egocéntro, paranoico y obsesionado con la fama. En numerosas oportunidades se refiere a él como una "estrella Pop". Assange aparece como un total narcisista  que dice frases como <em>"Voy a detener una guerra"</em> al referirse a la publicación de los documentos referidos al conflicto bélico de Irak con los Estados Unidos. 
<!--more-->
Assange, Schmitt y un importante grupo de talentosos colaboradores trabajaron básicamente de manera virtual sin un lugar físico concreto y comunicandose a través del chat. Sorprende la precaria infraestructura que tenian inicialmente y a lo largo de mucho tiempo para poder recibir y albergar los numerosos documentos que les llegaban. Estos siempre fueron entregados por los propios usuarios/informantes a través de la fragil plataforma.

Daniel repasa los sucesos que hicieron más famosos a wikileaks durante su estadia (uno de los casos más emblemáticos de aquel entonces fue el <a href="http://www.youtube.com/watch?v=Wfzz12LzMuQ">asesinato colateral</a>) y resume brevemente aquellos que ocurrieron luego de que él fuese despedido. Muchísimas anécdotas entorno al equipo que formaron en aquellos tiempos y como lograron llevar tamaño emprendimiento adelante. 

A pesar de que practicamente durante todo el libro Daniel critica duramente a Assange, también deja entreleerse un dejo de admiración y nostalgia. Cuando se refiere al  hecho de la acusasión de violación que pesa sobre Assange en Suiza, Daniel se refiero a ello de manera bastante a la defensiva por su ex-socio. 

Assange y wikileaks logra un excelente posicionamiento a nivel mundial luego del resonante caso del <a href="http://es.wikipedia.org/wiki/Filtraci%C3%B3n_de_documentos_diplom%C3%A1ticos_de_los_Estados_Unidos">cablegate</a> que a su vez nos muestra el excelente negocio que fue asociarse con ciertos grupos de medios (New York Times, The Guardian) para la exclusiva de la reproducción de la noticia. 

Finalmente el autor a quien a lo largo de la historia llega a contar algunas cuestiones muy personales y domésticas, termina anunciando un proyecto que es una verdadera alternativa a wikileaks: <a href="http://www.openleaks.org">openleaks</a>. Una plataforma que desarrolla junto al hacker que llama <em>"el arquitecto"</em>, otro compañero retirado de wikileaks.

Me puse a investigar que es de la vida de Assange hoy por hoy: el tipo sigue en prisión domiciliaria en la finca de su amigo en el Reino Unido, y aca hay una nota muy reciente que le hizo la televisión:

<iframe width="440" height="360" src="http://www.youtube.com/embed/xIMDj-IO3S0" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2011-05-03 15:27:51</wp:post_date>
		<wp:post_date_gmt>2011-05-03 18:27:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libros-dentro-de-wikileaks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="libros"><![CDATA[libros]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>juego HTML5 con el elemento CANVAS</title>
		<link>http://localhost/maxifalcone/?p=61</link>
		<pubDate>Tue, 17 May 2011 17:48:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[Hace ya un tiempo estoy investigando el elemento CANVAS. La API de dibujo de html5. Lo primero que invita a pensar es que este elemento sería el reemplazo ideal para flash. La mejor manera de poner a prueba esto sería desarrollar un juego. Ya hay cientos de juegos dando vueltas por la web, sin contar <a href="http://www.canvasdemo.com">esta</a> excelente página sobre el canvas mismo. Pero eso no invalida la experiencia personal, obviamente.

<img src="http://www.maxifalcone.org/lab/img/borrachin.png" style="border:none" alt="imagen del juego"/>

<!--more-->

En lo que primero pienso es en como manejar los eventos. Para no inventar la rueda (clásica excusa de todos los devs para ahorrarnos trabajo)  me puse a investigar y me encontré <a href="http://code.google.com/p/canvas-event-js/">esta libreria</a>, la cual fue desarrollada por <a href="http://www.blogger.com/profile/11603966854374488214">Sney2002</a>
quien <a href="http://novatoz.blogspot.com/2010/11/canvas-event-facil-interaccion-con-el.html">en su página </a>nos muestra algo de mas información acerca de su creación. Desgraciadamente es toda la documentación disponible que tiene esta tan útil librería. 

Mostré este juego en un post de <a href="http://mondopld.blogspot.com/2011/01/html5-el-elemento-canvas-y-la-libreria.html">mondoPLD</a>, pero merecía también estar en esta web.  Como decía allí es un juego en estado muy BETA pero da una idea de como trabajar con el canvas.

Basicamente sos un borracho que ante un bar cerrado te pusiste a rezar para que calleran porrones quilmes del cielo. Diós hoyó tus ruegos y tenés que capturar la mayor cantidad de porrones posibles. Obviamente solo podés usarlo con un navegador serio como Firefox, Opera o Chrome. 

mirá el ejemplo para jugar con el mouse <a href="http://maxifalcone.org/lab/borracho_click.html">aca</a>

y el juego para jugar con los cursores <a href="http://maxifalcone.org/lab/borracho_cursor.html">aca</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2011-05-17 14:48:37</wp:post_date>
		<wp:post_date_gmt>2011-05-17 17:48:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>juego-html5-con-el-elemento-canvas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="canvas"><![CDATA[canvas]]></category>
		<category domain="category" nicename="html5"><![CDATA[html5]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Algo de desarrollo web para iPad</title>
		<link>http://localhost/maxifalcone/?p=73</link>
		<pubDate>Thu, 23 Jun 2011 20:38:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://localhost/maxifalcone/wp-content/uploads/2011/06/touch2.jpg" alt="desarrollo web para ipad" title="touch pad" width="435" height="297" style="border:none" />

Definitivamente la explosión de dispositivos móviles en el mercado ha acelerado lo que es el desarrollo html5/css3/javascript, sumado a eso, los dispositivos touchscreen han creado una serie de novedosas interacciones que hacen el trabajo de desarrollo web bastante más desafiante.

Estuve haciendo una web exclusiva para ipad y me encontré con un par de cuestiones que hicieron del proyecto algo bastante interesante.

<!--more-->

<h3>Los evento "touchstart" y "touchend"</h3>

Con la intención de realizar el mismo efecto de rollOver sobre un link (elemento "a") que otrora conseguiamos con el pseudo-elemento de css :hover, recurrimos a js para trabajar con los eventos "touchstart" y "touchend". Como indican desde sus nombres son la acción que se ejecuta al iniciarce y al finalizar el "toque". Ya vemos que en este tipo de dispositivos no hay un verdadero efecto de hover dado que no hay cursor. Asi usando <a href="http://jquery.com/">jquery</a> (que otra cosa sino) bindiamos tales eventos.

Primero  fue necesario reconocer el dispositivo:
<code class="language-javascript">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/i))) {
</code>

Luego bindeamos los eventos de manera encadenada:
<code class="language-javascript">$("a.link").bind('touchstart', function(){
$(this).addClass('clase-con-estilos-efecto-hover')
   }).bind('touchend', function(){
 $(this).removeClass(''clase-con-estilos-efecto-hover'')
   });
</code>

Al no tratarse de un dispositivo ipad, ipod o iphone, le insertamos esas clases en el evento de hover, esto lo hacemos en el "else" de nuestro condicional, quedando el código completo asi:

<code class="language-javascript">if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/i))) {
$("a.link").bind('touchstart', function(){
$(this).addClass('clase-con-estilos-efecto-hover')
   }).bind('touchend', function(){
 $(this).removeClass('clase-con-estilos-efecto-hover')
   });
}else{
$('a.link').hover(function(){
$(this).addClass('clase-con-estilos-efecto-hoverr')
},function(){
$(this).removeClass('clase-con-estilos-efecto-hover')
})
}
</code>

<h3>Cambiando la orientacion del dispositivo</h3>

Recordemos siempre que el usuario puede cambiar la orientación del dispositivo y eso modificará nuestra web. Cuando por ejemplo existen elementos posicionados de manera absoluta habrá que reposicionarlos según la orientación. Primero detectamos la orientación:
<code class="language-javascript">window.addEventListener('orientationchange', nombre-de-la-funcion-que se ejecuta-al-cambiar-la-orientacion, false);</code> 
o su versión jquery:
<code class="language-javascript">$(window).bind("orientationchange",nombre-de-la-funcion-que se ejecuta-al-cambiar-la-orientacion)</code>
 
y finalmente la función que se ejecuta podría ser algo asi:

<code class="language-javascript">function cambiarOrientacion() {
var orientacion = Math.abs(window.orientation) === 90 ? 'horizontal' : 'vertical';
if(orientacion == "horizontal"){
 //ejecuta la acción para esta orientacion
}
}</code>

Otra alternativa si se trata simplemente de modificar los archivos css podemos setear el tipo de medio sin recurrir a js:
<code class="language-html">&lt;link rel="stylesheet" media="all and (orientation:portrait)" href="portrait.css"&gt;<br />&lt;link rel="stylesheet" media="all and (orientation:landscape)" href="landscape.css"&gt;</code>

Esto se pone realmente interesante.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2011-06-23 17:38:09</wp:post_date>
		<wp:post_date_gmt>2011-06-23 20:38:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>algo-de-desarrollo-web-para-ipad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="desarrollo-web-para-moviles"><![CDATA[desarrollo web para móviles]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>touch</title>
		<link>http://localhost/maxifalcone/?attachment_id=75</link>
		<pubDate>Thu, 23 Jun 2011 20:36:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2011/06/touch2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2011-06-23 17:36:12</wp:post_date>
		<wp:post_date_gmt>2011-06-23 20:36:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>touch</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2011/06/touch2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/06/touch2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:435;s:6:"height";i:297;s:4:"file";s:18:"2011/06/touch2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"touch2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"touch2-300x205.jpg";s:5:"width";i:300;s:6:"height";i:205;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ilustración de curso javascript</title>
		<link>http://localhost/maxifalcone/?attachment_id=81</link>
		<pubDate>Thu, 07 Jul 2011 15:55:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2011/07/cursojs-e13100542964162.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2011-07-07 12:55:43</wp:post_date>
		<wp:post_date_gmt>2011-07-07 15:55:43</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cursojs</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>82</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2011/07/cursojs-e13100542964162.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/07/cursojs-e13100542964162.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:266;s:4:"file";s:35:"2011/07/cursojs-e13100542964162.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:35:"cursojs-e13100542964162-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"cursojs-e13100542964162-300x231.jpg";s:5:"width";i:300;s:6:"height";i:231;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[ilustración de curso javascript]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";s:3:"416";s:6:"height";s:3:"320";s:4:"file";s:11:"cursojs.jpg";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Curso Javascript</title>
		<link>http://localhost/maxifalcone/?p=82</link>
		<pubDate>Thu, 07 Jul 2011 15:56:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[Una experiencia realmente interesante resultó ser el curso inicial-avanzado de javascript que debí dar en 10 clases. El objetivo fue que el estudiante, el cual no tiene mucha noción acerca de esta tecnología aunque está capacitado para maquetar xhtml y css, pudiera trabajar de manera avanzada con scripts en js y finalmente <a href="http://www.jquery.com" target="blank">jQuery</a>.
<img src="http://localhost/maxifalcone/wp-content/uploads/2011/07/cursojs-e13100542964162.jpg" alt="ilustración de curso javascript" title="ilustración de curso javascript" width="346" height="266" style="border:none;" />
Si bien resulta algo ambicioso esperar que quien haga el curso logre tales objetivos, vale la pena realizarlo a la par que se hagan los ejercicios y se investigue profundizando en los temas planteados. 

Recopilé en este post todo el material que produje: Temario, ejericios y ejemplos. Valió la pena.

<div class="curso_js">
<h3>Clase Nº1</h3>
<ul>
	<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase01/clase_1.pdf" target="blank">Clase N° 1</a></li>
	<li><strong>ejemplo: </strong><a href="http://maxifalcone.org/cursos/cursojs/clase01/ejemplo/estructuras_de_control/" target="blank">Estructura de control IF</a></li>
	<li><strong>Trabajo práctico:</strong>
<div style="background: #DDD; border: 1px solid #666; padding: 4px;">Al iniciar la app el usuario se encuentra con un boton de iniciarApp. clickea y le aparece un cuadro de dialogo que le pregunta si desea realmente iniciarla.
(confirm)

Al negarse el navegador se dirige a google.com

al aceptarla se muestra un cuadro de diàlogo pidiendole al usuario que ingrese su nombre.
(prompt)

Si el usuario deja el cuadro vacio o bien apreta cancelar el sistema vuelve a reclamarle que ingrese su nombre.

Cuando el usuario lo ingresa en la pantalla aparecerá un texto que dice “bienvenido “+nombre y desaparece el boton de” iniciar”

Para asignar los eventos al a href usamos window.onload = function(

)

aplicamos tambien:
document.getElementByid("id del elemento");
window.location.href = "http://www.google.com";

uso del "or" &gt; if(nombre == ""  || nombre == null )
document.getElementByid("mensaje").innerHTML = "Bienvenido"+nombre;

</div>
<a href="http://maxifalcone.org/cursos/cursojs/clase01/TP.zip">bajar archivo</a>
</li>
</ul>
<h3>Clase Nº2</h3>
<ul>
	<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase02/clase_2.pdf" target="blank">Clase N° 2</a></li>
	<li><strong>Ejemplo:</strong>
<ul>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase02/ejemplos/dom" target="blank">dom</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase02/ejemplos/estructura-de-control-switch" target="blank">estructura de control switch</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase02/ejemplos/funcionesyargumentos" target="blank">funciones y argumentos</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase02/ejemplos/strings" target="blank">strings</a></li>
</ul>
</li>
	<li><strong>Trabajo práctico:</strong>
<div style="background: #DDD; border: 1px solid #666; padding: 4px;">Continua la aplicacion:&nbsp;

El mensaje de bienvenida debe ahora validar por género: Si el nombre ingresado termina en “o” dirá “Bienvenido”+nombre. De terminar en “a” dirá “Bienvenida”+nombre. De ser otra letra dirá “BIenvenido/a”+nombre.

Al aceptar muestra la pantalla principal div id=”pantalla-inicial” y oculta el div del bt iniciar. En la pantalla principal aparece un menú con el bt iniciar Form.

Creamos un archivo crearForm que tenga una funcion del mismo nombre que agrega los elementos form, y un grupo de campos de texto (conjunto de pares de label, input).  los campos son Nombre, apellido dirección y el botón de submit.  el Formulario debe ser xhtml válido. con sus elementos, atributos y valores.

este formulario se agregará en el div id=”principal”.

</div>
<a href="http://maxifalcone.org/cursos/cursojs/clase02/TP.zip">bajar archivo</a>
</li>
</ul>
<h3>Clase Nº3</h3>
<ul>
	<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase03/clase_3.pdf" target="blank">Clase N° 3</a></li>
	<li><strong>ejemplo: </strong>
<ul>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase03/ejemplos/classes" target="blank">Clases y objetos</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase03/ejemplos/eventos" target="blank">eventos</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase03/ejemplos/FOR" target="blank">estructuras de control: FOR</a></li>
	<li><a href="http://maxifalcone.org/cursos/cursojs/clase03/ejemplos/metodos_array" target="blank">Array:métodos</a></li>
</ul>
</li>
	<li><strong>Trabajo práctico:</strong>
<div style="background: none repeat scroll 0% 0% #dddddd; border: 1px solid #666666; padding: 4px;">

Continua la aplicacion:

El boton que antes creaba un formulario, creará ahora un submenu con 3 items. que se encuentran en un array. cada item de ese array abrirá un formulario distinto. Uno abrirá un formulario para guardar los datos de un disco. Otro para guardar los datos de un libro. Y otro para grabar los datos de un programa.

disco: artista,album,año,guardado en
libro: autor,nombre,año, guardado en
programa: nombre, utilidad, guardado en

Construiremos la clase formulario y esta tendrá un método público para generar campos.

</div>
<a href="http://maxifalcone.org/cursos/cursojs/clase03/TP.zip">bajar archivo</a>
</li>
</ul>
<h3>Clase Nº4</h3>
<ul>
<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase04/clase_4.pdf" target="blank">Clase N° 4</a></li>
<li><strong>ejemplo: </strong>
<ul>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase04/ejemplos/ejemplo_ajax" target="blank">ejemplo de llamada Ajax</a></li>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase04/ejemplos/ejemplo_ajax_xml" target="blank">ejemplo de llamada xml Ajax</a></li>
</ul>
</li>
</ul>
<h3>Clase Nº5</h3>
<ul>
<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase05/clase_5.pdf" target="blank">Clase N° 5</a></li>
<li><strong>ejemplo: </strong>Operadores</li>
<li><strong>Trabajo práctico: <a href="http://maxifalcone.org/cursos/cursojs/clase05/TP.zip">final</a></strong></li>
</ul>
<h3>Clase Nº 6</h3>
<ul>
<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase06/clase6.pdf" target="blank">Clase N° 6</a></li>
</ul>

<h3>Clase Nº 7</h3>
<ul>
<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase07/clase7.pdf" target="blank">Clase N° 7</a></li>
</ul>

<h3>Clase Nº 8</h3>
<ul>
<li><strong>Temario:</strong> <a href="http://maxifalcone.org/cursos/cursojs/clase08/clase_8.pdf" target="blank">Clase N° 8</a></li>
<li><strong>ejemplos: </strong>
<ul>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase08/ejemploajax_txt" target="blank">ejemplo Ajax a un txt</a></li>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase08/ejemploajax_html" target="blank">ejemplo Ajax a un html</a></li>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase08/ejemploajax_js" target="blank">ejemplo Ajax a un js</a></li>
<li><a href="http://maxifalcone.org/cursos/cursojs/clase08/ejemploajax_php" target="blank">ejemplo Ajax a un php</a></li>
</ul>
</li>
</ul>
<h3>Clase N° 9</h3>
<ul>
<li> <strong>Trabajo práctico evaluatorio:</strong> jQuery
<div style="background: #DDD; border: 1px solid #666; padding: 4px;">
Al iniciarse la aplicación se llamará a un archivo .xml que tiene una estructura de datos de una colección de libros. En el menú de la izquierda (ul id="menu") se cargarán los títulos de los libros y en el id de results se muestra un texto pidiendo al usuario que elija uno de ellos. El usuario hará click sobre el título y: en h2 se cargará el título, en h3 el autor y en el div id="result" el resumen de contenido.
</div>
<a href="http://maxifalcone.org/cursos/cursojs/clase09/base.zip">bajar archivo</a>
<a href="http://maxifalcone.org/cursos/cursojs/clase09" target="blank">ver resultado</a>
</li>
</ul>
<h3>Clase N° 10</h3>
<ul>
<li> Trabajo práctico evaluatorio: Final
<div style="background: #DDD; border: 1px solid #666; padding: 4px;">

El examen es de javascript/jQuery y Ajax, adjunto se encuentran todos los archivos necesarios para la consigna. Es necesario que utilicen un localhost.<br><ol style="margin-left:20px;"><li>El usuario ingresa al index.html. Allí se encuentra con un form de user y pwd.</li>
<li>El sistema se contacta via POST contra el archivo lector.php. Chequea si el user y pass son correctos (que como podràn ver en el php son "admin" y "1234") de no ser asi los reclama ("ingrese el user y pass correctos"). </li>

<li>Una vez que el usuario ingresa la data correspondiente debe mostrarse dos opciones de idiomas (es, en) estos vienen en formato JSON. Usar el método de jQuery parseJSON<br></li><li>Las dos opciones son links al catalogo.html. la variable de idioma puede ir acompañado a la url como url#idioma o url?idioma=&nbsp;</li>

<li>En el archivo catálogo se captura el idioma y dependiendo de este tomara datos de data_es.xml y data_en.xml.</li><li>Cada archivo xml trae un catálogo de libros en diferentes idiomas. el sistema será un catálogo que permita navegarlos como si fuera un slide show, con botones "anterior" y "siguiente".</li>

<li>Al iniciarse se muestra el primer libro. con los botones de navegacion. el bt anterior estará desactivado (clase .pasivo de css) mientras que el siguiente estará activo (clase .activo de css) </li><li>Al clickear en siguiente, se hará en efecto de ocultamiento del libro anterior y un fadeIn del libro siguiente. y se activará el boton de "anterior".</li>

<li>El usuario puede navegar hasta el último libro. Allí se desactivará el boton "siguiente".</li><li>El contenido de "titulo","autor" y "contenido" se mostrarán en el &lt;div id="content"&gt; mientras que la imagen se mostrará dentro de &lt;div id="image-wrapper"&gt;</li>
</ol>
</div>
<a href="http://maxifalcone.org/cursos/cursojs/clase10/base.zip">bajar archivo</a>
</li>
</ul>

</div>
<script type="text/javascript">

$(".curso_js h3 ~ ul").hide();
$(".curso_js h3").css("cursor","pointer");
$(".curso_js h3").click(function(){$(this).next().toggle()})

</script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2011-07-07 12:56:58</wp:post_date>
		<wp:post_date_gmt>2011-07-07 15:56:58</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curso-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sin-categoria"><![CDATA[Sin categoría]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Editor jQuery</title>
		<link>http://localhost/maxifalcone/?p=93</link>
		<pubDate>Tue, 16 Aug 2011 15:21:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Durante las clases, cuando muestro algún ejemplo de javascript/jquery, suelo recurrir al método de escribir código en un editor (mi favorito es el scite) y para ver el resultado, voy al browser (generalmente firefox) y ahi suelo ejecutar o recargar la página. </p>

<p>El punto es que en esos cursos iniciales, me encuentro en la mayoría de los casos, que tengo que mostrar ejemplos muy pequeños de lo que es la manipulación del DOM. </p>

<img src="http://localhost/maxifalcone/wp-content/uploads/2011/08/Pantallazo-Mozilla-Firefox-e13134424577802.png" alt="Pantallazo-jquery editor" title="Pantallazo-jquery editor" width="445" height="241" class="alignnone size-full wp-image-103"  style="border:none" />

<!--more-->

<p>Se me ocurrió en un principio construir un textarea en donde pueda escribir el código y luego mediante la función eval() pueda ejecutar el código ingresado. El código modificaría los elementos del documento. Esto me permitiría mostrar las modificaciones "onthefly" mostrando el código. Para poder modificar el código html de la misma manera construí otro textarea en donde pueda ingresar nuevos nodos y luego ejecutaría el método "append()" de jquery, para ingresar el código html en el div principal. </p>

<p>Un primer prototipo tan burdo como lo que conté, fue lo que funcionó inicialmente. Alguien que vio esto me recomendó el <a href=" http://jsfiddle.net/">jsfiddle</a> un sitio que para el caso, cumple la misma funcionalidad. Solo que esté es sumamente complejo y con muchas funcionalidades. Una de las cosas que más me llamó la atención fueron los editores de código que tiene. Eso sería de suma utilidad para aplicación mia.</p>

<p>En un principio intenté construir un editor de código, haciendo un textarea transparente y por debajo unos divs y spans que se cargarían con lo que se está escribiendo a cada  keypress() y esos textos en el html de abajo estarían del mismo color del fondo. Obviamente no es posible darle muchos estilos a eso para palabras reservadas y { }, "" o (). </p>

<p>Investigando el código descubro una librería que hace todo ese trabajo y que basta con implementarla: <a href="http://codemirror.net/">el code mirror</a></p>

<p>Con una documentación bastante completa aunque escueta, el codemirror parece ser el recurso óptimo para la implementación de un editor online para ver como es su implementación nada como ver la <a href="http://codemirror.net/manual.html">documentación oficial</a></p>
<p>Y finalmente, <a href="http://maxifalcone.org/lab/editor/">el editor de código en cuestión</a>, para poder probar algunas cuestiones de jquery.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2011-08-16 12:21:21</wp:post_date>
		<wp:post_date_gmt>2011-08-16 15:21:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>editor-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sin-categoria"><![CDATA[Sin categoría]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pantallazo-jquery editor</title>
		<link>http://localhost/maxifalcone/?attachment_id=103</link>
		<pubDate>Mon, 15 Aug 2011 21:05:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2011/08/Pantallazo-Mozilla-Firefox-e13134424577802.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2011-08-15 18:05:52</wp:post_date>
		<wp:post_date_gmt>2011-08-15 21:05:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pantallazo-mozilla-firefox</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2011/08/Pantallazo-Mozilla-Firefox-e13134424577802.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/Pantallazo-Mozilla-Firefox-e13134424577802.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:445;s:6:"height";i:241;s:4:"file";s:54:"2011/08/Pantallazo-Mozilla-Firefox-e13134424577802.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:54:"Pantallazo-Mozilla-Firefox-e13134424577802-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:54:"Pantallazo-Mozilla-Firefox-e13134424577802-300x162.png";s:5:"width";i:300;s:6:"height";i:162;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[Pantallazo-jquery editor]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_backup_sizes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:9:"full-orig";a:3:{s:5:"width";s:3:"450";s:6:"height";s:3:"244";s:4:"file";s:30:"Pantallazo-Mozilla-Firefox.png";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HTML5: Generador de imágenes aleatorias para slideshow musical</title>
		<link>http://localhost/maxifalcone/?p=126</link>
		<pubDate>Fri, 30 Sep 2011 19:46:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[Con el objetivo inicial de investigar la posibilidades multimedia del html5, fundamentalmente lo que es la etiqueta audio y sus capacidades. Desarrollé <a href="http://maxifalcone.org/lab/audio" target="blank">esta aplicación</a> que permite leer un archivo de audio (mp3/ogg) de un tema, asociarlo a un archivo en formato json que muestra la letra de la canción en cuestión y generar un slideshow de imágenes con los resultados del servicio de google image search haciendo búsquedas con las palabras de la letra de la canción.

<img src="http://localhost/maxifalcone/wp-content/uploads/2011/09/audio2.jpg" alt="diagrama de aplicación" title="diagrama de aplicación" width="445" height="300" style="border:none" />

<!--more-->

<p>En un array js guardo los nombres de los temas que hacen al playlist. Estos los nombres de los archivos mp3 (google chrome, internet explorer 9) y ogg vorbis (mozilla firefox) y de los archivos json que tienen seteado el minuto en que aparece el texto.</p>

<strong>Ejemplo de letra en formato json</strong>
<code class="language-javascript">
{"song":[
{
"time":"00:06",
"lyrics":"Spiderman, Spiderman"
},
{
"time":"00:09",
"lyrics":"Does whatever a spider can"
},
{
"time":"00:11",
"lyrics":"Spins a web any size"
},
...
</code>

<p>Usando<a href="http://blog.nihilogic.dk/2008/08/reading-id3-tags-with-javascript.html"> esta librería js </a>que me permite leer las etiquetas ID3 de los archivos mp3 es lo que uso para mostrar el nombre del grupo, disco y nombre del tema</p>
<p>A la ejecución del evento timeupdate del elemento audio de html5, busca en el json el minuto declarado. Cuando el tiempo actual de la canción coincide con esa declaración muestra el texto.</p>

<strong>evento timeupdate del elemento audio</strong>
<code class="language-javascript">
var ap = document.getElementById("audioplayer");
ap.src = archivoAu;
ap.addEventListener("timeupdate",actualizarData,false);
</code>

<strong>función "actualizarData" que se ejecuta al timeupdate</strong>
<code class="language-javascript">
function actualizarData(ev){
	
	var total = utils.segundos_a_min(Math.floor(ev.target.duration)) ;
	var minActual = utils.segundos_a_min(Math.floor(ev.target.currentTime));
	
	imgS.cargarImagenes($("#currentT").html())
	
for(i=0;i&lt;lyrics.song.length;i++){
	
			if(lyrics.song[i].time == minActual){
				$("#currentT").html(lyrics.song[i].lyrics);
				if(init){
				clearTimeout(t);
				}
				$("#currentT").css("opacity","0.5");
				t = setTimeout(function(){$("#currentT").css("opacity","0")},4000);
				init = true;
				}
	}
</code>

<p>en la función anterior se puede ver el objeto imgS y su método "cargarImagenes" que pasa como parametro el contenido del div "#currentT" . En esta parte es cuando entra el <a href="http://code.google.com/apis/imagesearch/">API del google image search</a>.
</p>

<p>En el método cargarImagenes es donde traigo el objeto google que es parseado cuando se completó la búsqueda: 

<code class="language-javascript">
	imageSearch = new google.search.ImageSearch();
				imageSearch.setSearchCompleteCallback(this,searchComplete, null);
				imageSearch.setResultSetSize(8);
			
				imageSearch.execute(mistr);
</code>
"mistr" es el string con la palabra a buscar.
</p>
<p>Al completarse la búsqueda se ejecuta un callback con la función "searchComplete" que contiene el siguiente código:

<code class="language-javascript">
		   
 if (imageSearch.results &amp;&amp; imageSearch.results.length > 0) {
			   
			var randomnumber=Math.floor(Math.random()*8);
			var results = imageSearch.results;
			var result = results[randomnumber];
			$("#cont").html("&lt;img src='"+result.url +"' height='100%' /&gt;")
					
			}		 

</code>
Siembre estará buscando una foto aleatoria dentro de la primera página de resultados de google image search. El número 8 está dado porque es el máximo de resultados por página. Obviamente el código está visible en la misma aplicacion.</p>
<p>
<a href="http://maxifalcone.org/lab/audio/">
Aca se puede ver finalmente la demo</a>
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2011-09-30 16:46:02</wp:post_date>
		<wp:post_date_gmt>2011-09-30 19:46:02</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html5-generador-de-imagenes-aleatorias-para-slideshow-musical</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="audio"><![CDATA[audio]]></category>
		<category domain="category" nicename="html5"><![CDATA[html5]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>diagrama de aplicación</title>
		<link>http://localhost/maxifalcone/?attachment_id=130</link>
		<pubDate>Fri, 30 Sep 2011 19:43:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2011/09/audio2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2011-09-30 16:43:12</wp:post_date>
		<wp:post_date_gmt>2011-09-30 19:43:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>audio</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>126</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2011/09/audio2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/09/audio2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:445;s:6:"height";i:300;s:4:"file";s:18:"2011/09/audio2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"audio2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"audio2-300x202.jpg";s:5:"width";i:300;s:6:"height";i:202;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[diagrama de aplicación]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>De que se trata el Responsive Web Design (Diseño web sensible, adaptable o receptivo)</title>
		<link>http://localhost/maxifalcone/?p=134</link>
		<pubDate>Mon, 16 Jan 2012 14:55:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[<p>El término "página" es una metáfora que refiere a un elemento de la era pre-web y sigue de alguna manera determinando la manera en que componemos el diseño en la pantalla: de tal manera como si se tratase de una pieza gráfica para un soporte de papel. Algo que ya deberíamos replantearnos.</p>

<img src="http://localhost/maxifalcone/wp-content/uploads/2011/11/responsive_web_design2.jpg" alt="tu diseño en cualquier dispositivo?" title="responsive_web_design" width="431" height="369" class="alignnone size-full wp-image-144"  style="border:none"/>

<p>Hasta hace unos años, el tamaño de la "hoja" sobre la que armábamos la composición tenía una leve y regular variación dada fundamentalmente por la resolución de  su monitor: 640 x 480 - 800 x 600 - 1024 x 768 -  1280 x 800.. etc.</p>

<p>Luego aparecieron las notebooks. Mas tarde los dispositivos móviles, encabezado por teléfonos celular y reproductores mp3 al principio y luego las tablets. Y la variación es mas radical en todos estos dispositivos dado que usan browsers particulares y "portviews" con un tamaño muy diferente según marcas y modelos. Y a todo esto los browsers de televisores HD (resoluciones de 1920 x 1080 pixels) y consolas de juegos... socorro!! </p>

<p>¿Qué hacemos? Armamos una página diferente para cada uno de los dispositivos? ¿No será posible crear un layout lo suficientemente flexible para que este pueda verse elegante en cualquiera de ellos? Justamente, de eso se trata esta el Responsive web design.</p>

<p>El desafío que presenta este nuevo concepto es la adaptabilidad de un layout según el dispositivo con que se accede. Donde por ejemplo, el ancho de columnas, o la cantidad de estas variaría según el ancho de la pantalla o dispositivo. </p>

<p>Andy Hume nos muestra con <a href="http://blog.andyhume.net/responsive-by-default">el responsive es un fenómeno que se da por defecto en los navegadores</a> y ciertamente su mismo blog aplica esta filosofía. Tal como ocurrió otras veces, la moda rescata un concepto o criterio que existía desde hacía mucho tiempo</p>

<p>Suena bien ¿no? pero ¿cómo lo resolvemos? </p>
<!--more-->
<h3>Grillas líquidas, imágenes flexibles y media querys</h3>

<p>A excepción del tercer elemento de este título, a simple vista se entiende de que se trata cada uno de estos conceptos, y son la clave para tener en cuenta a la hora de alcanzar un diseño adaptable. Analicemos paso a paso como aplicar cada una de estas cuestiones.</p>

<h4>Grillas líquidas</h4>

<p>Se acabaron los valores fijos expresados en píxeles. Claro está que eso no significa que tendremos columnas capaces de extenderse tan infinitamente como sea posible en el dispositivo que utilicemos. En la columna principal y contenedora de todas las columnas internas, donde antes usabamos el:
<code code class="language-css">
width:960px;
</code>
Ahora habremos de usar la propiedad
<code code class="language-css">
max-width:960px;
</code>
que le indica el máximo posible de ancho. Si el viewport es menor, la columna se extenderá al 100% de este.</p>

<p>Es dentro de este contenedor principal donde nos manejaremos con valores porcentuales: Suponiendo que estamos armando un layout típico de blog, de dos columnas, y nuestra columna derecha tenía 320px de ancho,ahora debería ser 33.5%. Ese número lo tenemos de:<br />
<strong style="font-size:25px">320/960 = 33.3</strong><br />
Veamos un ejemplo:</p>

<p>Código html:
<code class="language-html">
&#60;body&#62;
		&#60;div id="main"&#62;
			&#60;div class="col1"&#62;&#60;/div&#62;
			&#60;div class="col2"&#62;&#60;/div&#62;
		&#60;/div&#62;
&#60;/body&#62;
</code>

Código css:
<code class="language-css">
					#main{
						max-width:960px;
						border:1px solid #F00;
						margin-left:auto;
						margin-right:auto;
					}

					.col1{
						width:66.5%;
						float:left;
						background:#F00;
					}

					.col2{
						width:33.5%;
						float:right;
						background:#0F0;
					}
</code>
<p><a href="http://maxifalcone.org/lab/responsive-web-design/fluid-grid/" target="_blank">Aquí podemos ver un ejemplo del uso de grillas líquidas</a></p>

<h4>Imágenes flexibles</h4>

<p>El otro gran pilar del Responsive, es la imagen flexible o fluida, que modifica su tamaño según la ventana. La clave de esto básicamente asignarle un tamaño porcentual via css:

<code class="language-css">
					image{
						width:100%;
					}
</code>
</p>

<p>En el siguiente ejemplo vemos una Bettie Page que modifica su tamaño hasta llegar a los 1000px de ancho máximo. Dado por un contenedor (div) con un 
<code class="language-css">
						max-width:1000px;
					
</code>
</p>
<p><a href="http://maxifalcone.org/lab/responsive-web-design/flexible-image/" target="_blank">aquí está el ejemplo en cuestión</a></p>

<h4>Media Queries</h4>

<p>En css2 se introdujo el @media que nos permitía especificar el tipo de medio al que apuntábamos nuestra hoja de estilos. A partir de css3 aparece una expresión que nos permite chequear si cierta condición se cumple en donde se aplicarán los estilos. </p>

<p>Por ejemplo, si queremos aplicar un layout de una o dos columnas para monitores con un tamaño menor a los 650 pixeles:

<code class="language-css">
@media screen and (max-width: 650px){
						// tus estilos aca...
}
</code>
</p>

<p>Si queremos aplicar otros estilos en cambio, para monitores mas usuales, fundamentalmente notebooks cuyo ancho sea no mayor a 1324:

<code class="language-css">
@media screen and (max-width: 1324px){
						// tus estilos aca...
}
</code>
</p>

<p>Así también si queremos determinar estilos para pantallas que no estén por debajo de los 900px: 

<code class="language-css">
@media screen and (min-width: 900px) {
						// tus estilos aca...
}
</code>
</p>

<p>Como así también podemos combinar múltiples condiciones. En el siguiente ejemplo veremos estilos que aplican a pantallas que oscilen entre 600px y 900px:

<code class="language-css">
@media screen and (min-width: 600px) and (max-width: 900px) {
						// tus estilos aca...
}
</code>
</p>

<p>Filtrar estilos según el máximo posible del dispositivo, este ejemplo es para un iphone:

<code class="language-css">
@media screen and (max-device-width: 480px) {
						// tus estilos aca...
}
</code>
</p>

<p>Asignar una hoja de estilos exclusivamente para iphone 4:

<code class="language-html">
&lt;link rel="stylesheet" media="only screen and (-webkit-min-device-pixel-ratio: 2)" type="text/css" href="iphone4.css" /&gt;
</code>

</p>


<p>
O en el caso de un ipad filtrar también por su orientación:
<code class="language-html">
&lt;link rel="stylesheet" media="all and (orientation:portrait)" href="portrait.css"&gt; 
&lt;link rel="stylesheet" media="all and (orientation:landscape)" href="landscape.css"&gt;
</code>

<h4>En conclusión...</h4>
<p> El responsive web design es una moda que es está aplicando muchísimo, y como tal, no podemos dejar de prestarle atención. <a href="http://www.webdesignshock.com/responsive-design-problems/" target="_blank">Si bien hay grandes y buenos críticos</a> no podemos pasar por alto su utilidad e importancia.</p>

<h4>Links interesantes</h4>
<ul>
<li><a href="http://designmodo.com/responsive-design-examples/" target="_blank">Responsive web design: 50 ejemplos y buenas prácticas</a></li>
<li><a href="http://www.smashingmagazine.com/2011/07/22/responsive-web-design-techniques-tools-and-design-strategies/" target="_blank">Técnicas, herramientas y estrategias para el responsive web design</a></li>
<li><a href="http://inspirationfeed.com/inspiration/websites-inspiration/60-examples-of-responsive-website-design/">60 ejemplos de Responsive Web Design</a></li>
<li><a href="http://www.abookapart.com/products/responsive-web-design" target="_blank">El gurú Ethan Marcotte y su libro</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2012-01-16 11:55:44</wp:post_date>
		<wp:post_date_gmt>2012-01-16 14:55:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>responsive-web-design</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="media-query"><![CDATA[media Query]]></category>
		<category domain="category" nicename="responsive-web-design"><![CDATA[Responsive Web Design]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>responsive_web_design</title>
		<link>http://localhost/maxifalcone/?attachment_id=144</link>
		<pubDate>Fri, 18 Nov 2011 21:09:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2011/11/responsive_web_design2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2011-11-18 18:09:50</wp:post_date>
		<wp:post_date_gmt>2011-11-18 21:09:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>responsive_web_design</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>134</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2011/11/responsive_web_design2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/11/responsive_web_design2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:431;s:6:"height";i:369;s:4:"file";s:34:"2011/11/responsive_web_design2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"responsive_web_design2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"responsive_web_design2-300x257.jpg";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[tu diseño en cualquier dispositivo?]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>responsive_web_design</title>
		<link>http://localhost/maxifalcone/?attachment_id=178</link>
		<pubDate>Tue, 17 Jan 2012 17:40:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/wp-content/uploads/2012/01/responsive_web_design2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2012-01-17 14:40:50</wp:post_date>
		<wp:post_date_gmt>2012-01-17 17:40:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>responsive_web_design-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>134</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://localhost/maxifalcone/wp-content/uploads/2012/01/responsive_web_design2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/01/responsive_web_design2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:431;s:6:"height";i:369;s:4:"file";s:34:"2012/01/responsive_web_design2.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"responsive_web_design2-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:34:"responsive_web_design2-300x257.jpg";s:5:"width";i:300;s:6:"height";i:257;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js: Instalación de socket.io en lion OSX</title>
		<link>http://localhost/maxifalcone/?p=294</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[<p>problema</p>
<p class="console">xcode-select: Error: No Xcode is selected. Use xcode-select -switch <path-to-xcode>, or see the xcode-select manpage (man xcode-select) for further information.</p>
  
<p>solucion</p>
<p class="console">sudo xcode-select --switch /usr/bin</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2013-06-25 19:07:26</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django en macOS</title>
		<link>http://localhost/maxifalcone/?p=328</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[https://www.djangoproject.com/download/1.6b2/tarball/

cd Django-1.6b2
sudo python setup.py install

(https://docs.djangoproject.com/en/dev/intro/tutorial01/)

django-admin.py startproject mysite

cd mysite

python manage.py runserver]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2013-08-28 17:26:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="sin-categoria"><![CDATA[Sin categoría]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://localhost/maxifalcone/?p=335</link>
		<pubDate>Sun, 30 Aug 2015 22:09:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2015-08-30 22:09:15</wp:post_date>
		<wp:post_date_gmt>2015-08-30 22:09:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>335</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="home-menu"><![CDATA[home Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:6:"comics";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://localhost/maxifalcone/?p=336</link>
		<pubDate>Sun, 30 Aug 2015 22:09:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/?p=336</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date>2015-08-30 22:09:15</wp:post_date>
		<wp:post_date_gmt>2015-08-30 22:09:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>336</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="home-menu"><![CDATA[home Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:6:"webdev";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://localhost/maxifalcone/?p=337</link>
		<pubDate>Sun, 30 Aug 2015 22:09:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2015-08-30 22:09:15</wp:post_date>
		<wp:post_date_gmt>2015-08-30 22:09:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>337</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="home-menu"><![CDATA[home Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:6:"musica";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>home</title>
		<link>http://localhost/maxifalcone/</link>
		<pubDate>Sun, 30 Aug 2015 22:13:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/?page_id=342</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date>2015-08-30 22:13:26</wp:post_date>
		<wp:post_date_gmt>2015-08-30 22:13:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[page-home.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducción a Node.js: instalando y configurando Node.js en OS X 10</title>
		<link>http://localhost/maxifalcone/?p=190</link>
		<pubDate>Tue, 11 Jun 2013 18:58:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://nodejs.org/images/logo.png"  style="border:none;"/>
<p><a href="http://nodejs.org/" target="_blank">Node.js</a> es la nueva tecnología de la que muchos están hablando.  Un usual error que me llevó a profundizar en esto es la terminación de js como si se tratara de otra librería javascript para manejar datos, eventos y objetos dentro del navegador.</p>

<p>Node.js NO es una tecnología de la parte cliente. Es una tecnología del servidor como php, Solo que a diferencia de este no necesita de un servidor apache sino que el mismo Node es el creador del servidor en si.</p>

<p>cómo?</p>

<p>Vamos por el principio: Por qué elegí OSX como SO? porque me va bien trabajar en Mac. y Node no es una tecnología muy afin al entorno windows. De hecho en sus anteriores versiones no corría bajo el Sistema de Microsoft. Hasta hace no mucho, solo podías verlo en OS X y Linux.</p>

<!--more-->
<p>Nos descargamos el PKG de <a href="http://nodejs.org/download/" target="_blank">aca</a> y lo instalamos como si fuera otro programa. No hay nada de diferente esta instancia del proceso. </p>

<p>Notarás que una vez instalado no lo vas a encontrar en la típica carpeta de Applications. Sino que se encuentra en /usr/local/bin/node.</p>

<p>Olvidate ahora de los entornos visuales. Es hora de usar la consola.</p>

<h3>La consola: un nuevo aliado.</h3>
 
<p>Vas al Spotlight del Sistema y tipeá "Terminal". Abrís esto y ya tenés la consola andando. Si estás leyendo esto seguramente no estás familiarizado. Desde la consola se maneja todo el sistema Operativo con la sintaxis de Unix. Esto aunque no creas tiene numerosas ventajas.</p>

<p>La ventana en cuestión no es muy amigable. He trabajado en Linux un tiempo y me familiaricé con con la consola y fundamentalmente con el Guake (http://guake.org/) que es un emulador de consola que funciona en full screen, y de una manera muy interesante a nivel de experiencia de usuario. Su transparencia nos permite ver las ventanas que están detrás (siempre quedarán atrás). Buscando algo parecido para Mac me encontré con el <a href="http://totalterminal.binaryage.com/" target="_blank">Total Terminal</a> Un emulador de consola bastante más amigable. Me encantó.</p>

<p>Al abrir la consola, te vas a encontrar que estás en la carpeta raiz, que es el lugar desde donde siempre arranca la consola. El directorio es <strong>/Users/[nombre-de-usuario]</strong></p>

<p>Nuestro objetivo es crear un proyecto Node.js muy sencillo y luego testearlo, asi que antes vamos aprender una serie de comandos útiles para esto.</p>

<h3>Algunos comandos interesantes para usar en la consola</h3>

<dl>
<dt>donde estoy?: </dt>
<dd><strong>pwd:</strong>va a devolverte el directorio en el que te encontrás</dd>
<dt>subir un nivel, cambiar de carpetas</dt>
<dd><strong>cd .., cd nombre de carpeta:</strong>la abreviación de "change directory". y de eso se trata: de cambiar de directorios </dd>
<dt>crear un directorio</dt>
<dd><strong>mkdir [nombre del directorio]</strong> de esta manera creamos un directorio en la carpeta en que estemos parados</dd>
<dt>crear un archivo:</dt>
<dd><strong>touch [nombre-del-archivo.js]:</strong> De esa manera estamos creando el archivo a editar</dd>
<dt>abrir un archivo:</dt>
<dd><strong>open [nombre-del-archivo.js]:</strong> Asi se abrirá el archivo js que hayamos creado con el editor de código que tenemos por defecto para editar javascript</dd>
</dl>

<p>Claramente podemos hacer esto por el S.O. tal como lo conocemos, pero me parece interesante para poder familiarizarse con el entorno y la consola.</p>

<h3>Creando nuestra primera aplicación</h3>

<p>Bien, ahora vamos a escribir algo de JS. Notarás que es la misma sintaxis del javascript para navegadores tal como lo conocíamos, pero con una serie de objetos y funciones que nunca abríamos usado antes.</p>

<p> este ejemplo es bien conocido y puede encontrarse en mucho de los sitios útiles que están al final del articulo:<p>

<code class="language-javascript">
	var http = require("http");

	var elservidor = function(request, response) {
	  response.writeHead(200, {"Content-Type": "text/html"});
	  response.write("Hola Mundo");
	  response.end();
	}

	http.createServer(elservidor).listen(8888);
</code>

<p>Es bien sencillo: como dijimos antes, con Node.js creamos es el servidor completo y eso es lo que hemos hecho: la variable http es un módulo que viene en la instalación por defecto de Node.js (ya veremos más adelante de que se trata el fascinante mundo de los módulos. Luego creamos la función "elservidor" con los parámetros de request y response y es la función que crea el contenido html. Luego, el http que creamos, tiene un método "createServer" que crea el servidor, y otro método "listen" que asigna el puerto, en este caso 8888</p>

<p>Vamos a la consola y allí tipeamos "node [nombre-del-archivo.js]". Sino nos devuelve ningún error, eso significa que la app está funcionando. Para testearla, abrimos una ventana del navegador y allí vamos a <strong>localhost:8888</strong>

<p> Ahi encontraremos el mensaje "hola Mundo". Emocionante verdad? ya veremos en siguientes tutoriales que más podemos hacer con esto.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2013-06-11 15:58:01</wp:post_date>
		<wp:post_date_gmt>2013-06-11 18:58:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introduccion-a-node-js-instalando-y-configurando-node-js-en-os-x-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducción a Node.js: módulos en Node.js con NPM en OS X 10</title>
		<link>http://localhost/maxifalcone/?p=212</link>
		<pubDate>Wed, 12 Jun 2013 15:14:53 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=212</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://npmjs.org/static/npm.png" alt="logo de NPM" style="width:250px; border:none;"/>
<p>Los Módulos son la parte esencial de Node.js. Todo nuestro desarrollo se basa en ellos. Nuestra instalación por defecto ya tiene algunos que pueden encontrarse en <em>usr/local/lib</em> la carpeta de node_modules y <em>usr/local/bin</em> los binarios de estos. </p>

<p>Vas a notar que en cualquier desarrollo que hagamos vamos a necesitar siempre instalar algún modulo. Hay cientos de ellos y los podés encontrar en su sitio: <a href="https://npmjs.org/" target="_blank">NPMjs.org</a>

<p>NPM es la herramienta para instalar, desarrollar y gestionar los módulos en Node.js. En muchos tutoriales que podés encontrar por ahi, vas a ver que te dicen que es una instalación aparte en el pkg que hemos bajado en el tutorial anterior veremos que el NPM ya está instalado. </p>

<p>La forma básica de instalación que encontrarás en las documentaciones de los módulos es a travéz de la consola: npm install [nombre-del-modulo]. Sin embargo en nuestro entorno eso está incompleto.</p>
<!--more-->
<h3>SUDO</h3>
<p>Para instalar un módulo en nuestra computadora y usarlo en cualquier proyecto, este debe estar disponible de manera global. Es para esto que anteponemos la palabra SUDO a la acción que queremos ejecutar, para que podamos hacerlo con los privilegios del usuario root. SUDO significa Super User DO. y debemos completar el comando con el flag -g que signfica "global". </p>

<p>Finalmente el comando completo sería <em>sudo npm install [nombre-del-modulo] -g</em>. De esta manera el modulo se instalará donde esperamos.</p>

<h3>Ejemplo: Express</h3>
<p>Express es un módulo de framework MVC para trabajar en nuestro proyecto Node. lo instalamos:</p>
<p><em>sudo npm install Express -g</em></p>
<p>Vamos a nuestro proyecto (el que creamos en el post anterior) y lo llamamos como a cualquier otro módulo:
<code class="language-javascript">
var express = require('express');
</code>
y al ejecutar el proyecto en la consola, esta nos devolverá un error diciéndonos que ese módulo no se encuentra disponible.
</p>

<p>Una alternativa es hacer un link del módulo a nuestro proyecto:</p>
<p><em>sudo npm link express</em></p>

<p>Ahi veremos que se ha creado un link del módulo en nuestro proyecto. Si volvemos a ejecutar nuestra aplicación lo haremos sin problemas.</p>

<h3>La alternativa: editar el .bash_profile</h3>
<p>Podemos editar el archivo .bash_profile. Este es un archivo que se encuentra en el directorio raiz de tu sistema (recordemos que el raiz es Users/[tu-nombre-de-usuario]).

<p>Si tu OS X no fue modificado para mostrar los archivos ocultos es muy probable que jamás encuentres ese archivo. Si es asi andá a la consola y escribí lo siguiente</p>
<p><em>defaults write com.apple.finder AppleShowAllFiles TRUE KillAll Finder</em></p>

<p>Luego de eso si lo podrás encontrar. Abrilo con un editor de código y agregá la siguiente línea:</p>
<p><em>export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH</em></p>

<p>Lo que hemos hecho con esto es modificar la variable $NODE_PATH para que busque directamente en su ruta: /usr/local/lib/node_modules</p>

<h3>Algo mas sobre NPM</h3>
<p>Como dijimos antes, hay cientos de modulos que pueden investigarse en su sitio o también desde nuestra misma consola:</p>
<p><em>npm info [nombre-del-modulo]</em></p>
<p> para ver un poco sobre las capacidades del NPM, en la consola podés tipear:</p>
<p><em>npm -h</em></p>
<p>En el próximo tutorial vamos a seguir viendo un poco más sobre el módulo Express</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>212</wp:post_id>
		<wp:post_date>2013-06-12 12:14:53</wp:post_date>
		<wp:post_date_gmt>2013-06-12 15:14:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>modulos-en-node-js-con-npm-en-os-x-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Node.js y Express: instalación y prueba</title>
		<link>http://localhost/maxifalcone/?p=234</link>
		<pubDate>Thu, 13 Jun 2013 15:56:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[<p>En el tutorial anterior, hablamos de Express, un framework MVC para trabajar con Node.js. Su uso es sumamente popular.</p>

<p>Lo instalamos como cualquier módulo:<p>
<p class="console">sudo npm install express -g</p>
<p>Luego de unos segundos el modulo se habrá instalado. Para ver las opciones que express trae tipeamos:</p>
<p class="console">express -h</p>
<!--more-->
  <h3>Una pequeña prueba</h3>
<p> Probamos nuestro primer "hola mundo" usando express. Como antes lo hemos hecho, creamos un archivo "express.js" y escribimos el siguiente código </p>
 <code class="language-javascript">
  var express = require('express');
	var app = express();

  app.get('/', function(req, res){
    res.send('Hola mundo');
  });

	app.listen(3000);
</code> 
 <p>Sencillo verdad? Ahora vamos a la consola y tipeamos</p> 
 <p class="console">node express.js</p>
 <p>Vamos a localhost:3000 y allí encontraremos nuestro simpático "hola Mundo"</p>  
 <p>con la primer variable 'app' creamos nuestra aplicación. que es devuelta con la función express() y luego el método get, que es una de las acciones del objeto HTTP, y determinar el path y la acción:</p>
 <p>"/" es el path, al no haber nada despues de la barra simplemente será la home de la aplicación y luego la functión que pasa los parametros "require-response" es la que envia el mensaje.</p>
 <h3>Express y su estructura de carpetas</h3>
 <p> Express nos permite instalar fácilmente la estructura de carpetas adecuadas para desarrollar nuestra aplicación de manera adecuada. En la consola tipeamos:</p>
  <p class="console">express nombre-de-la-app </p>
  <p> Habrá creado entonces la carpeta donde se guardará todo el proyecto. Entramos a la carpeta en cuestión:</p>
  <p class="console">cd nombre-de-la-app</p>
  <p>y luego allí tipeamos:</p>
	<p class="console">npm install</p>
	<p>Se habrá creado una estructura de carpetas y archivos que funcionan como plantilla. Podés revisar un poco de que se trata, y hasta ejecutar la applicación en el browser en tu localhost:3000</p>
  <p>entre otras cosas, podrás encontrar dentro de node_modules la carpeta "jade" que es el motor de plantillas que trae por defecto express. En el próximo post hablaremos de otro motor de plantillas: HBS.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2013-06-13 12:56:09</wp:post_date>
		<wp:post_date_gmt>2013-06-13 15:56:09</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-y-express-instalacion-y-prueba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js: express y hbs</title>
		<link>http://localhost/maxifalcone/?p=258</link>
		<pubDate>Mon, 17 Jun 2013 20:58:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Como vimos en el post anterior, la instalación basica de Express utiliza Jade como motor de templates. Antes de ponerme a ver Jade y sus posibilidades me interesó el Hbs. Este motor de templates basado en HandleBars el cual está basado en Moustache. La diferencia radica que hbs se adapta a express de manera sencilla</p>
<p>Se puede ver en la documentación oficial de Express que no hay soporte para hbs. Allí mismo se habla como alternativa a Jade el <strong>ejs</strong>, un motor de template que puede instalar con la estructura misma que se genera con express:</p>
<p class="console">$ express - --ejs myapp</p>
<p>Desgraciadamente no es posible hacerlo con Hbs, Entonces este se instala como un Módulo externo:</p>
<p class="console">$ sudo npm install hbs -g</p>
<!--more-->
<h3>Un ejemplo</h3>
<p>Vamos a ver un ejemplo sencillo que muestra el uso de hbs. Al lado del archivo .js (que puede ser el visto en el anterior post) creamos una carpeta "views". Dentro de ella creamos un archivo index.hbs. Su contenido será sencillo:</p>
<code class="language-html ">
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;hbs test&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;h1&gt;Titulo&lt;/h1&gt;
    &lt;p&gt;mi nombre es: {{name}}&lt;/p&gt;   
    &lt;/body&gt;
&lt;/html&gt;
</code>

<p>Luego en el app.js usaremos el siguiente código</p>

<code class="language-javascript">

var express = require('express');
var app = express();

app.set('views', __dirname + '/views');
app.set('view engine', 'hbs');


app.get('/', function(req, res){
  var data = {
        name: "Hbs",
    }
  res.render('index.hbs', data);
});

app.listen(3000);

</code>
<p>Vamos a localhost:3000 y ahi encontraremos el html que esperamos con el saludo "mi nombre es Hbs". Notese que aun no traimos el módulo hbs. No fue necesario. En el response ("res") usamos el método render que le pasa por parámetro el archivo .hbs, y luego la data. esa data no es mas que la variable "name" con el valor hbs.</p>
<p>La otra cosa que hemos agregado más arriba es el app.set('views'... donde pasamos la ruta de la carpeta views y en la siguiente línea le decimos a la app que el view engine es hbs.</p>
<p>Con esto ya tenemos una idea de como funciona express y los motores de plantillas</p>
<p>En el próximo post veremos el uso de estilos (css) con Node.js.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2013-06-17 17:58:32</wp:post_date>
		<wp:post_date_gmt>2013-06-17 20:58:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-express-y-hbs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Un poco mas sobre hbs: contenidos parciales</title>
		<link>http://localhost/maxifalcone/?p=269</link>
		<pubDate>Wed, 19 Jun 2013 14:22:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[<p>hbs continuando con su herencia de Moustache, trabaja con logic-less, esto es evitar la lógica de la aplicación en el modo de vista para un mejor mantenimiento. Parte de eso se trata el uso de los templates parciales </p>
<p>Un ejemplo típico de cualquier web es que se repitan la cabecera y el pie. Esto invita a imaginarnos que en nuestra carpeta de views podemos tener los archivos <em>header.hbs</em> y <em>footer.hbs</em>. Suena lógico y de eso se trata.</p>
<!--more-->
<h3>layout.hbs: una página maestra</h3>
<p>En la lógica de las <em>master page</em> de ASP.Net; hbs utiliza el archivo layout.hbs, en donde ubicaremos las etiquetas básicas de doctype html header y body. Creamos el archivo en cuestión dentro de la carpeta /views</p>
<code class="language-html">
&lt;!doctype html&gt;
&lt;html&gt;
	&lt;head&gt;
	  &lt;title&gt;{{title}}&lt;/title&gt;
	&lt;/head&gt;

	&lt;body&gt;
		{{&gt; header}}
		{{{body}}}
		{{&gt; footer}}
	&lt;/body&gt;

&lt;/html&gt;
 </code>
<p>Como vemos, dentro de los tags del <em>body</em> se está metiendo los archivos header y footer a través de la inclusion {{&gt; header}}, {{&gt; footer}} y una variable body, que será el contenido que pondremos en la index.hbs.</p>

<h3>index.hbs, la página principal</h3>

<p>En la carpeta views creamos el archivo index.hbs. Dentro de este pondremos el contenido, (y solo el contenido):</p>
<code class="language-html">
&lt;section&gt;
&lt;h2&gt;Index&lt;/h2&gt;
&lt;p&gt;Esto es un parrafo en la página principal&lt;/p&gt;
&lt;/section&gt;
</code>
<p>lo siguiente será crear los archivos a ser incluidos: header y footer</p>
<h3>Inluciones: header y footer</h3>
<p>Ahora, ambos archivos los crearemos en una subcapeta de views llamada "partials".</p>
<p><strong>header.hbs</strong></p>
<code class="language-html">
&lt;header&gt;
&lt;h1&gt;{{title}}&lt;/h1&gt;
&lt;/header&gt;
</code>
<p><strong>footer.hbs</strong></p>
<code class="language-html">
&lt;footer&gt;
Este es el pie de página.
&lt;/footer&gt;
</code>
<p>Notese como en el header hemos puesto la variable "title" que vamos a pasarla cuando creemos nuestra app. Me parece interesante mostrar esto para que se note la no incidencia de la partición del template en este asunto.<p>
<h3>app.js: Finalmente la aplicación</h3>
<p>En la app.js vamos a crear la aplicación en si. En esta oportunidad se será necesario traer el módulo de Express para usar el método "registerPartials" que se encargará de registrar los archivos de header y footer, bastará para esto pasar como parametro la carpeta partials.</p>
<code class="language-javascript">
var express = require('express');
var hbs = require('hbs');

var app = express();

hbs.registerPartials(__dirname + '/views/partials');

app.set('view engine', 'hbs');
app.set('views', __dirname + '/views');


app.get('/', function(req, res) {

    res.locals = {
        title: 'testeando hbs'
    }

    res.render('index');
});

app.listen(3000);
</code>
<p>Ahora ya con esto, tendremos un html mostrando todo el contenido que mostramos. Para ver esto finalmente, ejecutamos node en consola:</p>
<p class="console">node app.js</p>
<p>Vamos a localhost:3000 y allí veremos el resultado. Recuerdese que el uso de parciales es útil para mostrar contenidos repetidos en otras partes de nuestro sitio.</p>  
<p>En el próximo post veremos la posibilidad de extender un area de nuestro html con cierto contenido costumizado para aplicar directamente en una página específica de nuestro sitio.</p>  
  
  
  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2013-06-19 11:22:06</wp:post_date>
		<wp:post_date_gmt>2013-06-19 14:22:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>un-poco-mas-sobre-hbs-contenidos-parciales</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>node.js: Instalación local de los módulos con package.json</title>
		<link>http://localhost/maxifalcone/?p=284</link>
		<pubDate>Tue, 25 Jun 2013 18:31:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Hemos visto en un <a href="http://maxifalcone.org/2013/06/node-js-y-express-instalacion-y-prueba.html" target="_blank">post anterior como usabamos express para hacer todo un scaffolding de nuestra aplicación haciendo uso del comando express nombre-de-la-app y luego el comando npm install.</a> En los siguientes ejemplos usamos como template engine a hbs, a diferencia de lo que nos permite express en su instalación por defecto que utiliza jade. Por ende esta instalación no nos sirve. Sin embargo sería muy util hacer una instalación local de los módulos que vamos a utilizar por una simple cuestión de portabilidad.</p>

<p>Con el primer comando express creamos la estructura de carpetas y el archivo json. Esta es la principal utilidad para hacer la instalación de los módulos. El archivo en cuestión tiene la siguiente estructura:</p>


<code class="language-javascript">
  {
  "name": "application-name",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "3.2.6",
    "jade": "*"
  }
}
</code>

<p>Como podemos ver, en el último elemento "dependencies" nos está diciendo los módulos que va a instalar cuando se ejecute el comando npm install. En la documentación de Express podemos encontrar que podemos setear las dependencias desde el comando express: Sabemos que Express tiene la capacidad de crear el scaffolding con los pre procesadores de html y css que le indiquemos. Por ej:</p>

<p class="console">express --sessions --css less --template ejs myapp</p>

<p>Lo que hace esto es hacer una instalación de express con soporte para sessions, less como motor de css y ejs como motor de template. Generando este json:</p>

<code class="language-javascript">
{
  "name": "application-name",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "3.2.6",
    "jade": "*",
    "less-middleware": "*"
  }
}
</code>
<p> Lo lógica indica que deberíamos poder hacer una instalación de igual manera con hbs. Desgraciadamente, al día de escribir este post, eso no es posible. </p>
<p>Lo que si podemos hacer es crear un package.json "from the scratch":</p>

<code class="language-javascript">
{
  "name": "pkg-example",
  "version": "0.0.1",
  "dependencies": {
    "express": "3.1.x",
    "hbs":"*"
  }
}
</code>
<p>Creamos este archivo en la carpeta de nuestro proyecto, y luego simplemente en la consola tipeamos</p>
<p class="console">npm install</p>
<p>Luego encontraremos la carpeta node_modules con los dos modulos: express y hbs. Tal como se lo indicamos en el "dependencies" de nuestro json.</p>
<p>Claramente allí podemos agregar todos los módulos que necesitemos. Es necesario familiarizarse con estos archivos de configuración porque son sumamente necesarios y sumamente utilizados.</p>
<p>Sumamente útil tener siempre a mano <a href="http://package.json.nodejitsu.com/" target="_blank">el cheatsheet o chuleta del packaje.json</a></p>







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2013-06-25 15:31:23</wp:post_date>
		<wp:post_date_gmt>2013-06-25 18:31:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js-instacion-local-de-los-modulos-con-package-json</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Menos es mas: LESS. Un preprocesador CSS</title>
		<link>http://localhost/maxifalcone/?p=298</link>
		<pubDate>Wed, 10 Jul 2013 15:13:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Less Es uno de los módulos que empezamos a ver en nuestros anteriores ejemplos como complemento a express y hbs. Less es un pre procesador de CSS que nos permite generar nuestro archivo css a partir de nuestro código less. Este último, nos permite usar variables, funciones y herencia.</p>
<p>El uso de las variables es algo muy útil cuando tenemos que reutilizar código. Un ejemplo muy típico sería el de guardar un color:</p>
<code class="language-css">
@color-base: #2d5e8b;

.class1 {
	background-color: @color-base;
}
.class2 {
	background-color: #fff;
	color: @color-base;
}
.class3 {
	border: 1px solid @color-base;
}

</code>
<p>En el ejemplo podemos ver que la variable "@color-base" es usada por 3 clases diferentes. Algo muy útil para manejar una paleta de colores. </p>
<p>De acuerdo a <a href="http://lesscss.org/#docs" target="_blank">la documentación de su sitio oficial</a> podemos ver que less puede ser usado tanto como pre-procesador desde el lado del server, tanto como desde el lado cliente. Obviamente, aqui lo veremos desde la primera opción, interactuando con express y hbs</p>
<h3>Less-middleware, el compilador de less para usar en express</h3>
<p>al hacer una instalación del modulo less, podemos ver que podemos crear generar nuestro archivo css a partir del less como strout en la consola </p>
<p class="console">$ lessc styles.less</p>
<p>Luego copiar esa salida a un archivo css. Algo no muy cómodo. También se puede usar su método render, y hacer unas cuantas cosas mas aún. Incluso se puede encontrarse un tutorial <a href="http://onedayitwillmake.com/blog/2013/03/compiling-less-from-a-node-js-script/" target="_blank">aca</a> para hacer un compilador de less en node.js</p>
<p>Siendo que vamos a utilizar Express como Framework podemos contar con otro módulo: less-middleware que tal como su nombre indica se trata de less + el software necesario para la comunicación con Express. Se instala igual que tantos otros módulos:</p>
<p class="console">sudo npm install less-middleware -g</p>
<p>Si seguimos el primer tutorial de esta serie, ya podemos usarlo sin problemas.</p>
<h3>Un ejemplo</h3>
<p>Retomándo el <a href="http://maxifalcone.org/2013/06/un-poco-mas-sobre-hbs-contenidos-parciales.html" target="_blank">último tutorial de parciales</a> vamos a agregarle un par de líneas para usar less sobre ese mismo ejemplo. Abrimos el archivo <strong>app.js</strong> en donde editaremos nuestro código. Allí creamos dos nuevas variables: path y lessMiddleware respectivamente</p>
<code class="language-javascript">
var path = require('path');
var lessMiddleware = require('less-middleware');
 </code> 
<p>luego a la variable app le agregamos unas cosas usando el método "use"</p>
<code class="language-javascript">
app.use(app.router);
app.use(lessMiddleware({ src: __dirname + '/public' }));
app.use(express.static(path.join(__dirname, 'public')));
 </code> 
<p><strong>router</strong> es el código que corre las rutas de la aplicación, express.static es la función que sirve la carpeta, que en este caso se llama public, todo el código en defenitiva sería el siguiente:</p>
<code class="language-javascript">

var fs = require('fs');

var express = require('express');
var hbs = require('hbs');
var path = require('path');
var lessMiddleware = require('less-middleware');

var app = express();

hbs.registerPartials(__dirname + '/views/partials');

app.set('view engine', 'hbs');
app.set('views', __dirname + '/views');
app.use(app.router);
app.use(lessMiddleware({ src: __dirname + '/public' }));
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', function(req, res) {
    res.locals = {
        title: 'testeando hbs'
    }
    res.render('index');
});

app.listen(3000);

</code> 
<p>Aun no probamos la app, porque como dijimos, debemos crear la carpeta public, la cual lo haremos dentro del proyecto, al mismo nivel que app.js</p>
<p>Luego allí, creamos el archivo <em>style.less</em></p>
<h3>Algo sobre la sintaxis de Less</h3>
<p>Abrimos el archivo, vamos a crear unos estilos para esto. Primero unas variables que serán para colores:</p>
<code class="language-css">
@color-base: #2d5e8b;
@gray-color: #999;
</code>
<p>y además vamos añadir dos funciones (si, css con funciones):</p>
<code class="language-css">
.border-radius (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.box-shadow (@x: 0px, @y: 3px, @blur: 5px, @alpha: 0.5) {
    -webkit-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    -moz-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
}
</code>
<p>Estas funciones lo que hacen es dar el borde redondeado y la sombra al objeto html que pretendamos pasando como parametros los valores de radio en la primera función y de dirección, profundidad y transparencia en la segunda función. Su implementación sería:</p>
<code class="language-css">
.class{
  	.box-shadow(5px, 5px, 6px, 0.3);
}
</code>
<p>y en el archivo css que imprima el resultado será:</p>
<code class="language-css">
.class{
  -webkit-box-shadow: 5px 5px 6px rgba(0, 0, 0, 0.3);
  -moz-box-shadow: 5px 5px 6px rgba(0, 0, 0, 0.3);
  box-shadow: 5px 5px 6px rgba(0, 0, 0, 0.3);
}
</code>
<p>por qué la función? porque estamos  englobando una serie de propiedades que logran un mismo efecto. (en los ejemplos, bordes redondeados y sombra proyectada) aplicables según un navegador correspondiente.</p>
<p>Finalmente el código nos quedaría de la siguiente manera</p>
<code class="language-css">
@color-base: #2d5e8b;
@gray-color: #999;

.border-radius (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.box-shadow (@x: 0px, @y: 3px, @blur: 5px, @alpha: 0.5) {
    -webkit-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    -moz-box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
    box-shadow: @x @y @blur rgba(0, 0, 0, @alpha);
}

html{
	background: @gray-color;
}

body {
	font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
	width: 900px;
	margin-left: auto;
	margin-right: auto;
	background: #FFF;
	.border-radius(20px);
	.box-shadow(0px, 0px, 20px, 2);
}
header{
	
	border-bottom:1px solid @gray-color;
	padding:20px;
}

section{
	padding:20px;
	min-height: 300px;
}

footer{
	text-align: center;
	padding: 5px;
	font-size: 10px;
	color: #333;
}

h1{
  color: @color-base;
}
</code>
<p>Finalmente vamos a la consola y allí ejecutamos</p>
<p class="console">node app.js</p>
<p>Allí tendremos la página creada con unos estilos aplicados.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2013-07-10 12:13:37</wp:post_date>
		<wp:post_date_gmt>2013-07-10 15:13:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>menos-es-mas-less-un-preprocesador-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>instalar mongodb en OS X y un ejemplo con Node.js</title>
		<link>http://localhost/maxifalcone/?p=312</link>
		<pubDate>Wed, 17 Jul 2013 15:03:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://maxifalcone.org/?p=312</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Siguiendo con las prácticas node.js, vamos a instalar y probar la base de datos MongoDB, Simplemente vamos a hacer una instalación, carga de datos y luego un server que muestre los datos en una web</p>

<h3>Una herramienta útil para OSX:Brew</h3>
<p>Probablemente hubiera sido de los más util empezar por este programa, pero lo descubrí luego de estar trabajando en Node.js y estos tutoriales y resultó ser de lo más útil y sencillo. Homebrew es una aplicación que permite la instalación y gestión de otros programas</p>
<p>Perfectamente se puede saltear este parte si ya tenés brew instalado, sino lo tenés ni te interesa, podés instalar mongodb descargando e instalandolo como cualquier otro paquete desde <a href="http://www.mongodb.org/downloads" target="_blank">su página oficial</a></p>
<p>Para instalar brew necesitás antes tener instalado el xquartz y la command line tool</p>
<p>Para el primero bajate el dmg de <a href="http://xquartz.macosforge.org/landing/">aca</a>, instalalo, deslogeate, y luego volvé a logearte</p>
<p>Para el segundo bajalo desde <a href="https://developer.apple.com/downloads/index.action" target="_blank">aca</a>, ciertamente es necesario tener un id de developer en el sitio de Apple. Algo que va a ser muy necesario siempre</p> 
<p>Luego podrás instalar brew con la siguiente linea en la consola</p>
<p class="console">ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"</p>
<p>No es necesario usar SUDO, simplemente se instalará en /usr/local</p>
<h3>instalar mongodb</h3>
<p>Luego de tener instalado homebrew, abrimos la consola y tipeamos</p>
<p class="console">brew install mongodb</p>
<p>Ahi se instalará mongodb:</p>

<p class="console">
To have launchd start mongodb at login:
    ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
Then to load mongodb now:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
Or, if you don't want/need launchctl, you can just run:
    mongod
</p>
<h3>Trabajando con Mongo DB</h3>
<p>Para hacer andar la db ejecutamos en consola mongod</p>
<p>De esa manera tenemos la base de datos corriendo en nuestro localhost en el puerto 27017. Luego de arrancar la db podemos abrir un editor de mongo tipeando mongo en otra instancia de la consola</p>
<p>para probar, allí podemos cargar un dato a la db:</p>
<p class="console">db.test.save( { a: 1 } )<br/>
> db.test.find()</p>
<p>el método find nos devolverá el dato recién cargado. Por ejemplo:</p>
<p>{ "_id" : ObjectId("51ddaceb9639ad48df5a18db"), "a" : 1 }</p>
<h3>Usando node.js</h3>
<p>Vamos a cargar un dato sencillo, usando el clásico ejemplo de personas. En la consola donde ejecutamos la sintaxis de mongo vamos a cargar unos datos:</p>

<p class="console">
db.personas.insert({nombre:'pepe',apellido:'gonzalez'})<br>
db.personas.find()<br>
</p>

<p>vamos a instalar la libreria de node mongodb:</p>
<p class="console">sudo npm install mongodb -g</p>

<p>luego creamos un archivo app.js, con el código muy similar al primer ejemplo, pero cargando toda la lógica de mongo:</p>


<code class="language-javascript">
var mongodb = require('mongodb');
var http = require("http");

 
var serverdb = new mongodb.Server("127.0.0.1", 27017, {});
var dbTest = new mongodb.Db('test', serverdb, {})

var data;

var elservidor = function(request, response) {
  response.writeHead(200, {"Content-Type": "text/html"});
  for(i=0;i&lt;data.length;i++){
    response.write(data[i].nombre);
    response.write("<br>")
    response.write(data[i].apellido);
  }
  response.end();
} 
 
 
dbTest.open(function (error, client) {
  if (error) throw error;
 
   
  var collection = new mongodb.Collection(client, 'personas');
   
   collection.find().toArray(function(err, docs) {
   		data = docs;
  
  });
  
  http.createServer(elservidor).listen(8888);
  
});
</code>

<p>Podemos ver que primero llamamos la librería mongodb, luego se conecta al servidor(serverdb), luego con la base de datos (dbTest), y luego el método dbTest.open() obtiene la colección de 'personas'. estas son guardadas como un Array en la variable data. Luego se crea el server que ejecuta la función "elservidor" que se encarga de parsear la variable data y mostrarla en el documento html.</p>
<p>Luego de esto simplemente:</p>
<p class="console">node app.js</p>
<p>Vamos a localhost:8888, y allí veremos los datos de personas.</p>
<p>Un paso mas en la batalla :)</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2013-07-17 12:03:01</wp:post_date>
		<wp:post_date_gmt>2013-07-17 15:03:01</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>instalar-mongodb-en-os-x-y-un-ejemplo-con-node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="node-js"><![CDATA[node.js]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>comic test</title>
		<link>http://localhost/maxifalcone/?p=345</link>
		<pubDate>Mon, 07 Sep 2015 16:35:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://localhost/maxifalcone/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[comic test]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2015-09-07 16:35:09</wp:post_date>
		<wp:post_date_gmt>2015-09-07 16:35:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>comic-test</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="comics"><![CDATA[comics]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
